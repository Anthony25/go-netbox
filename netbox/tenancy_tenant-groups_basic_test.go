// Copyright 2017 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by robots at
// 2017-05-17 14:19:30.943187077 +0200 CEST

package netbox

import (
	"encoding/json"
	"errors"
	"fmt"
	"net/http"
	"reflect"
	"testing"
)

// Using this to override MarshalJSON
// In all cases when posting data to netbox-API, the TenantGroup.MarshalJSON is what you want,
// but not here as a return in testHandler
type serverDataTenantGroup TenantGroup

func convertToServerDataTenantGroup(data []*TenantGroup) []*serverDataTenantGroup {
	dataWant := make([]*serverDataTenantGroup, len(data))
	for i := range data {
		tmp := serverDataTenantGroup(*data[i])
		dataWant[i] = &tmp
	}
	return dataWant
}

func TestBasicTenantGroupGet(t *testing.T) {
	var tests = []struct {
		desc string
		want *TenantGroup
	}{
		{
			desc: "Simple TenantGroup",
			want: testTenantGroup(1),
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("[%d] %s", i, tt.desc), func(t *testing.T) {
			serverData := serverDataTenantGroup(*tt.want)

			c, done := testClient(t, testHandler(t, http.MethodGet, "/api/tenancy/tenant-groups/1/", &serverData))
			defer done()

			res, err := c.Tenancy.TenantGroups.Get(1)
			if err != nil {
				t.Fatalf("unexpected error from Client.Tenancy.TenantGroups.Get: %v", err)
			}

			if want, got := tt.want, res; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected TenantGroup:\n- want: %v\n-  got: %v", want, got)
			}
		})
	}
}

func TestBasicTenantGroupGet404(t *testing.T) {
	c, done := testClient(t, testStatusHandler(t, http.MethodGet, "/api/tenancy/tenant-groups/1/", &struct {
		Detail string `json:"detail"`
	}{
		Detail: "Not found.",
	},
		http.StatusNotFound))
	defer done()

	res, err := c.Tenancy.TenantGroups.Get(1)
	errstr := "404 - Not found."
	if want, got := errors.New(errstr), err; !reflect.DeepEqual(want, got) {
		t.Fatalf("unexpected error from Client.Tenancy.TenantGroups.Get:\n- want: %v\n-  got: %v", want, got)
	}

	if res != nil {
		t.Fatalf("unexpected result:\n- want: %v\n-  got: %v", nil, res)
	}
}

func TestBasicListExtractTenantGroup(t *testing.T) {
	want := []*TenantGroup{
		testTenantGroup(1),
		testTenantGroup(2),
	}
	serverWant := convertToServerDataTenantGroup(want)
	serverData, _ := json.Marshal(serverWant)
	c, done := testClient(t, testHandler(t, http.MethodGet, "/api/tenancy/tenant-groups/", &pageData{
		Count:       2,
		NextURL:     "",
		PreviousURL: "",
		Results:     serverData,
	}))
	defer done()

	page := c.Tenancy.TenantGroups.List()

	if page == nil {
		t.Fatalf("unexpexted result from c.Tenancy.TenantGroups.List.")
	}

	got := []*TenantGroup{}
	counter := 0
	for page.Next() {
		var err error
		got, err = c.Tenancy.TenantGroups.Extract(page)
		if err != nil {
			t.Fatalf("unexpected error from c.Tenancy.TenantGroups.Extract: %v", err)
		}
		counter = counter + 1
		if counter > 2 { // Safe guard
			break
		}
	}
	if counter != 1 {
		t.Fatalf("unexpected page count:\n- want: 1\n-  got: %d", counter)
	}

	if !reflect.DeepEqual(want, got) {
		t.Fatalf("unexpected result:\n- want: %v\n-  got: %v", want, got)
	}

	if page.Err() != nil {
		t.Fatalf("unexpected error from page:\n- want: %v\n-  got: %v", want, got)
	}
}

func TestBasicCreateTenantGroup(t *testing.T) {
	var tests = []struct {
		desc       string
		data       *TenantGroup
		want       *TenantGroup
		serverData interface{}
		status     int
		errstr     string
	}{
		{
			desc:       "Create with ID 0",
			data:       testTenantGroupCreate(1),
			want:       testTenantGroup(1),
			status:     0,
			errstr:     "",
			serverData: testTenantGroup(1),
		},
		{
			desc:   "Create duplicate",
			data:   testTenantGroupCreate(1),
			want:   nil,
			status: http.StatusBadRequest,
			errstr: "400 - {\"name\":[\"TenantGroupsService with this name already exists.\"]}\n",
			serverData: &struct {
				Name []string `json:"name"`
			}{
				Name: []string{"TenantGroupsService with this name already exists."},
			},
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("[%d] %s", i, tt.desc), func(t *testing.T) {
			c, done := testClient(t, testStatusHandler(t, http.MethodPost, "/api/tenancy/tenant-groups/", tt.serverData, tt.status))
			defer done()

			var terr error
			if tt.errstr != "" {
				terr = errors.New(tt.errstr) // Using errstr and initialize real err here, to satisfy golint
			}

			res, err := c.Tenancy.TenantGroups.Create(tt.data)
			if want, got := terr, err; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
			if want, got := tt.want, res; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected TenantGroup:\n- want: %v\n-  got: %v", want, got)
			}
		})
	}
}

func TestBasicUpdateTenantGroup(t *testing.T) {
	var tests = []struct {
		desc       string
		data       *TenantGroup
		want       *TenantGroup
		serverData interface{}
		status     int
		errstr     string
	}{
		{
			desc:       "Create with ID 1",
			data:       testTenantGroup(1),
			want:       testTenantGroup(1),
			serverData: testTenantGroup(1),
			status:     0,
			errstr:     "",
		},
		{
			desc: "Update not found",
			data: testTenantGroup(1),
			want: nil,
			serverData: &struct {
				Detail string
			}{
				Detail: "Not found.",
			},
			status: http.StatusNotFound,
			errstr: "404 - Not found.",
		},
		{
			desc: "Create duplicate",
			data: testTenantGroup(1),
			want: nil,
			serverData: &struct {
				Name []string `json:"name"`
			}{
				Name: []string{"TenantGroupsService with this name already exists."},
			},
			status: http.StatusBadRequest,
			errstr: "400 - {\"name\":[\"TenantGroupsService with this name already exists.\"]}\n",
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("[%d] %s", i, tt.desc), func(t *testing.T) {
			c, done := testClient(t, testStatusHandler(t, http.MethodPatch, "/api/tenancy/tenant-groups/1/", tt.serverData, tt.status))
			defer done()

			var terr error
			if tt.errstr != "" {
				terr = errors.New(tt.errstr) // Using errstr and initialize real err here, to satisfy golint
			}

			res, err := c.Tenancy.TenantGroups.Update(tt.data)
			if want, got := terr, err; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
			if want, got := tt.want, res; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected TenantGroup:\n- want: %v\n-  got: %v", want, got)
			}
		})
	}
}

func TestBasicDeleteTenantGroup(t *testing.T) {
	var tests = []struct {
		desc       string
		data       *TenantGroup
		serverData interface{}
		status     int
		errstr     string
	}{
		{
			desc:       "Delete ID 1",
			data:       testTenantGroup(1),
			serverData: testTenantGroup(1),
			status:     0,
			errstr:     "",
		},
		{
			desc: "Delete not Found",
			data: testTenantGroup(1),
			serverData: &struct {
				Detail string `json:"detail"`
			}{
				Detail: "Not found.",
			},
			status: http.StatusNotFound,
			errstr: "404 - Not found.",
		},
	}

	for i, tt := range tests {
		t.Run(fmt.Sprintf("[%d] %s", i, tt.desc), func(t *testing.T) {
			c, done := testClient(t, testStatusHandler(t, http.MethodDelete, "/api/tenancy/tenant-groups/1/", tt.serverData, tt.status))
			defer done()

			var terr error
			if tt.errstr != "" {
				terr = errors.New(tt.errstr) // Using errstr and initialize real err here, to satisfy golint
			}

			err := c.Tenancy.TenantGroups.Delete(tt.data)
			if want, got := terr, err; !reflect.DeepEqual(want, got) {
				t.Fatalf("unexpected error:\n- want: %v\n-  got: %v", want, got)
			}
		})
	}
}
